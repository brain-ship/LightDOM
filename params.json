{
  "name": "LightDOM",
  "tagline": "Lightweight java-based DOM library to process XML documents",
  "body": "LightDOM is a lightweight java-based DOM library to process XML documents. Have a look at the examples or at the source code and the test classes to see how LightDOM works.\r\n\r\n# Maven dependency\r\n\r\nAdd the following Maven dependency to use LightDOM in your project:\r\n\r\n    <dependency>\r\n        <groupId>io.github.barkbeetle</groupId>\r\n        <artifactId>lightdom</artifactId>\r\n        <version>1.1.4</version>\r\n    </dependency>\r\n\r\n# Examples\r\n### Load, modify and save XML file\r\n\r\n    Document doc = Document.fromFile(\"TestFiles/books.xml\");\r\n    Element ratingElement = new Element(\"rating\");\r\n    ratingElement.appendChild(new TextNode(\"8.5\"));\r\n    doc.getRootElement().getElementById(\"bk103\").appendChild(ratingElement);\r\n    doc.toFile(\"TestFiles/books2.xml\");\r\n\r\n### Create new document from scratch\r\n\r\n    // create document\r\n    \r\n    Document doc = new Document();\r\n    Element rootElement = new Element(\"movies\");\r\n    doc.setRootElement(rootElement);\r\n    \r\n    // movie 1\r\n    \r\n    Element movie1 = new Element(\"movie\", \"m1\");\r\n    \r\n    Element title1 = new Element(\"title\");\r\n    title1.appendChild(new TextNode(\"The Lord of the Rings: The Fellowship of the Ring\"));\r\n    Element director1 = new Element(\"director\");\r\n    director1.appendChild(new TextNode(\"Peter Jackson\"));\r\n    Element released1 = new Element(\"released\");\r\n    released1.appendChild(new TextNode(\"2001\"));\r\n    \r\n    movie1.appendChild(title1);\r\n    movie1.appendChild(director1);\r\n    movie1.appendChild(released1);\r\n    \r\n    // movie 2\r\n    \r\n    Element movie2 = new Element(\"movie\", \"m2\");\r\n    \r\n    Element title2 = new Element(\"title\");\r\n    title2.appendChild(new TextNode(\"Avatar\"));\r\n    Element director2 = new Element(\"director\");\r\n    director2.appendChild(new TextNode(\"James Cameron\"));\r\n    Element released2 = new Element(\"released\");\r\n    released2.appendChild(new TextNode(\"2009\"));\r\n    \r\n    movie2.appendChild(title2);\r\n    movie2.appendChild(director2);\r\n    movie2.appendChild(released2);\r\n    \r\n    // movie 3\r\n    \r\n    Element movie3 = new Element(\"movie\", \"m3\");\r\n    \r\n    Element title3 = new Element(\"title\");\r\n    title3.appendChild(new TextNode(\"Skyfall\"));\r\n    Element director3 = new Element(\"director\");\r\n    director3.appendChild(new TextNode(\"Sam Mendes\"));\r\n    Element released3 = new Element(\"released\");\r\n    released3.appendChild(new TextNode(\"2012\"));\r\n    \r\n    movie3.appendChild(title3);\r\n    movie3.appendChild(director3);\r\n    movie3.appendChild(released3);\r\n    \r\n    // save document to file\r\n    \r\n    rootElement.appendChild(movie1);\r\n    rootElement.appendChild(movie2);\r\n    rootElement.appendChild(movie3);\r\n    \r\n    doc.toFile(\"TestFiles/movies.out.xml\");\r\n\r\n### Find element with XPath\r\n\r\n    Document doc = Document.fromFile(\"TestFiles/books.xml\");\r\n    Element book1Title = doc.getRootElement().getElementByQuery(\"book[@id = 'bk101' and price > 30]/title\");\r\n    Element book2Author = doc.getRootElement().getElementByQuery(\"book[contains(description, 'battle one another')]/author\");\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}